{"mappings":"ACAA,IAAM,aAAe,SAAS,cAAc,CAAC,sBACvC,aAAe,SAAS,cAAc,CAAC,iBACvC,iBAAmB,SAAS,cAAc,CAAC,sBAsCjD,eAAe,uBAAuB,CAAQ,EAC5C,GAAI,EACF,GAAI,CACF,IAAM,EAAmB,MAAM,UAAU,WAAW,CAAC,KAAK,CAAC,CAAE,KAAM,QAAS,GAE5E,GAAI,AAA2B,YAA3B,EAAiB,KAAK,CAAgB,CACxC,IAAM,EAAiB,OAAO,OAAO,CAAC,MAAM,CAAC,uBAC7C,OAAO,IAAI,CAAC,MAAM,CAAC,CAAE,IAAK,CAAe,GACzC,MACF,CACF,CAAE,MAAO,EAAK,CACZ,QAAQ,KAAK,CAAC,qCAAsC,GACpD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAE,IAAK,kBAAmB,GAC7C,MACF,CAGF,OAAO,OAAO,CAAC,WAAW,CAAC,CAAE,KAAM,qBAAsB,SAAA,CAAS,EACpE,CAtDA,OAAO,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,oBAAqB,AAAC,IAC7C,aAAa,OAAO,CAAG,CAAC,CAAC,EAAK,iBAAiB,AACjD,GAEA,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAiB,AAAC,IACxC,aAAa,OAAO,CAAG,CAAC,CAAC,EAAK,aAAa,AAC7C,GAEA,OAAO,OAAO,CAAC,WAAW,CAAC,CAAE,KAAM,iBAAkB,EAAG,MAAO,KACzD,OAAO,OAAO,CAAC,SAAS,EAIxB,GAAY,EAAS,cAAc,EAAI,aAAa,OAAO,EAC7D,MAAM,uBAAuB,aAAa,OAAO,CAErD,GAEA,iBAAiB,gBAAgB,CAAC,QAAS,KACzC,OAAO,OAAO,CAAC,eAAe,EAChC,GAEA,aAAa,gBAAgB,CAAC,SAAU,UACtC,IAAM,EAAW,aAAa,OAAO,CAErC,OAAO,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAE,kBAAmB,CAAS,GAEvD,MAAM,uBAAuB,EAC/B,GAEA,aAAa,gBAAgB,CAAC,SAAU,KACtC,IAAM,EAAW,aAAa,OAAO,CAErC,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAE,cAAe,CAAS,EACpD","sources":["<anon>","src/ui/js/popup.js"],"sourcesContent":["const cameraToggle = document.getElementById('recognition-toggle');\nconst mirrorToggle = document.getElementById('mirror-toggle');\nconst openDashboardBtn = document.getElementById('open-dashboard-btn');\nchrome.storage.local.get('recognitionActive', (data)=>{\n    cameraToggle.checked = !!data.recognitionActive;\n});\nchrome.storage.sync.get('mirrorEnabled', (data)=>{\n    mirrorToggle.checked = !!data.mirrorEnabled;\n});\nchrome.runtime.sendMessage({\n    type: 'getCameraStatus'\n}, async (response)=>{\n    if (chrome.runtime.lastError) return;\n    if (response && response.isCameraActive != cameraToggle.checked) await handleCameraPermission(cameraToggle.checked);\n});\nopenDashboardBtn.addEventListener('click', ()=>{\n    chrome.runtime.openOptionsPage();\n});\ncameraToggle.addEventListener('change', async ()=>{\n    const isActive = cameraToggle.checked;\n    chrome.storage.local.set({\n        recognitionActive: isActive\n    });\n    await handleCameraPermission(isActive);\n});\nmirrorToggle.addEventListener('change', ()=>{\n    const isActive = mirrorToggle.checked;\n    chrome.storage.sync.set({\n        mirrorEnabled: isActive\n    });\n});\nasync function handleCameraPermission(isActive) {\n    if (isActive) try {\n        const permissionStatus = await navigator.permissions.query({\n            name: 'camera'\n        });\n        if (permissionStatus.state !== 'granted') {\n            const permissionsUrl = chrome.runtime.getURL('ui/permissions.html');\n            chrome.tabs.create({\n                url: permissionsUrl\n            });\n            return;\n        }\n    } catch (err) {\n        console.error(\"Could not check camera permission:\", err);\n        chrome.tabs.create({\n            url: 'permissions.html'\n        });\n        return;\n    }\n    chrome.runtime.sendMessage({\n        type: 'toggle-recognition',\n        isActive\n    });\n}\n\n//# sourceMappingURL=popup.6bc87e87.js.map\n","const cameraToggle = document.getElementById('recognition-toggle');\r\nconst mirrorToggle = document.getElementById('mirror-toggle');\r\nconst openDashboardBtn = document.getElementById('open-dashboard-btn');\r\n\r\nchrome.storage.local.get('recognitionActive', (data) => {\r\n  cameraToggle.checked = !!data.recognitionActive;\r\n});\r\n\r\nchrome.storage.sync.get('mirrorEnabled', (data) => {\r\n  mirrorToggle.checked = !!data.mirrorEnabled;\r\n});\r\n\r\nchrome.runtime.sendMessage({ type: 'getCameraStatus' }, async (response) => {\r\n  if (chrome.runtime.lastError) {\r\n    return;\r\n  }\r\n\r\n  if (response && response.isCameraActive != cameraToggle.checked) {\r\n    await handleCameraPermission(cameraToggle.checked);\r\n  }\r\n});\r\n\r\nopenDashboardBtn.addEventListener('click', () => {\r\n  chrome.runtime.openOptionsPage();\r\n});\r\n\r\ncameraToggle.addEventListener('change', async () => {\r\n  const isActive = cameraToggle.checked;\r\n\r\n  chrome.storage.local.set({ recognitionActive: isActive });\r\n\r\n  await handleCameraPermission(isActive);\r\n});\r\n\r\nmirrorToggle.addEventListener('change', () => {\r\n  const isActive = mirrorToggle.checked;\r\n\r\n  chrome.storage.sync.set({ mirrorEnabled: isActive });\r\n});\r\n\r\nasync function handleCameraPermission(isActive) {\r\n  if (isActive) {\r\n    try {\r\n      const permissionStatus = await navigator.permissions.query({ name: 'camera' });\r\n\r\n      if (permissionStatus.state !== 'granted') {\r\n        const permissionsUrl = chrome.runtime.getURL('ui/permissions.html');\r\n        chrome.tabs.create({ url: permissionsUrl });\r\n        return;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Could not check camera permission:\", err);\r\n      chrome.tabs.create({ url: 'permissions.html' });\r\n      return;\r\n    }\r\n  }\r\n\r\n  chrome.runtime.sendMessage({ type: 'toggle-recognition', isActive });\r\n}"],"names":["cameraToggle","document","getElementById","mirrorToggle","openDashboardBtn","handleCameraPermission","isActive","permissionStatus","navigator","permissions","query","name","state","permissionsUrl","chrome","runtime","getURL","tabs","create","url","err","console","error","sendMessage","type","storage","local","get","data","checked","recognitionActive","sync","mirrorEnabled","response","lastError","isCameraActive","addEventListener","openOptionsPage","set"],"version":3,"file":"popup.6bc87e87.js.map"}